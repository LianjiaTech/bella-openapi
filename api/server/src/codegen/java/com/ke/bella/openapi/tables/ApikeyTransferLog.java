/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.openapi.tables;


import com.ke.bella.openapi.DefaultSchema;
import com.ke.bella.openapi.Indexes;
import com.ke.bella.openapi.Keys;
import com.ke.bella.openapi.tables.records.ApikeyTransferLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * API Key所有权转移审计日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApikeyTransferLog extends TableImpl<ApikeyTransferLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apikey_transfer_log</code>
     */
    public static final ApikeyTransferLog APIKEY_TRANSFER_LOG = new ApikeyTransferLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyTransferLogRecord> getRecordType() {
        return ApikeyTransferLogRecord.class;
    }

    /**
     * The column <code>apikey_transfer_log.id</code>. 主键ID
     */
    public final TableField<ApikeyTransferLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>apikey_transfer_log.ak_code</code>. API Key编码
     */
    public final TableField<ApikeyTransferLogRecord, String> AK_CODE = createField(DSL.name("ak_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "API Key编码");

    /**
     * The column <code>apikey_transfer_log.from_owner_type</code>. 原所有者类型
     */
    public final TableField<ApikeyTransferLogRecord, String> FROM_OWNER_TYPE = createField(DSL.name("from_owner_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "原所有者类型");

    /**
     * The column <code>apikey_transfer_log.from_owner_code</code>. 原所有者编码
     */
    public final TableField<ApikeyTransferLogRecord, String> FROM_OWNER_CODE = createField(DSL.name("from_owner_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "原所有者编码");

    /**
     * The column <code>apikey_transfer_log.from_owner_name</code>. 原所有者姓名
     */
    public final TableField<ApikeyTransferLogRecord, String> FROM_OWNER_NAME = createField(DSL.name("from_owner_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "原所有者姓名");

    /**
     * The column <code>apikey_transfer_log.to_owner_type</code>. 新所有者类型
     */
    public final TableField<ApikeyTransferLogRecord, String> TO_OWNER_TYPE = createField(DSL.name("to_owner_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "新所有者类型");

    /**
     * The column <code>apikey_transfer_log.to_owner_code</code>. 新所有者编码
     */
    public final TableField<ApikeyTransferLogRecord, String> TO_OWNER_CODE = createField(DSL.name("to_owner_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "新所有者编码");

    /**
     * The column <code>apikey_transfer_log.to_owner_name</code>. 新所有者姓名
     */
    public final TableField<ApikeyTransferLogRecord, String> TO_OWNER_NAME = createField(DSL.name("to_owner_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "新所有者姓名");

    /**
     * The column <code>apikey_transfer_log.transfer_reason</code>. 转移原因
     */
    public final TableField<ApikeyTransferLogRecord, String> TRANSFER_REASON = createField(DSL.name("transfer_reason"), SQLDataType.VARCHAR(500).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "转移原因");

    /**
     * The column <code>apikey_transfer_log.status</code>. 转移状态(pending/completed/failed)
     */
    public final TableField<ApikeyTransferLogRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("completed", SQLDataType.VARCHAR)), this, "转移状态(pending/completed/failed)");

    /**
     * The column <code>apikey_transfer_log.operator_uid</code>. 操作人用户ID
     */
    public final TableField<ApikeyTransferLogRecord, Long> OPERATOR_UID = createField(DSL.name("operator_uid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "操作人用户ID");

    /**
     * The column <code>apikey_transfer_log.operator_name</code>. 操作人姓名
     */
    public final TableField<ApikeyTransferLogRecord, String> OPERATOR_NAME = createField(DSL.name("operator_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "操作人姓名");

    /**
     * The column <code>apikey_transfer_log.ctime</code>. 创建时间
     */
    public final TableField<ApikeyTransferLogRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>apikey_transfer_log.mtime</code>. 更新时间
     */
    public final TableField<ApikeyTransferLogRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private ApikeyTransferLog(Name alias, Table<ApikeyTransferLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApikeyTransferLog(Name alias, Table<ApikeyTransferLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("API Key所有权转移审计日志表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>apikey_transfer_log</code> table reference
     */
    public ApikeyTransferLog(String alias) {
        this(DSL.name(alias), APIKEY_TRANSFER_LOG);
    }

    /**
     * Create an aliased <code>apikey_transfer_log</code> table reference
     */
    public ApikeyTransferLog(Name alias) {
        this(alias, APIKEY_TRANSFER_LOG);
    }

    /**
     * Create a <code>apikey_transfer_log</code> table reference
     */
    public ApikeyTransferLog() {
        this(DSL.name("apikey_transfer_log"), null);
    }

    public <O extends Record> ApikeyTransferLog(Table<O> child, ForeignKey<O, ApikeyTransferLogRecord> key) {
        super(child, key, APIKEY_TRANSFER_LOG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APIKEY_TRANSFER_LOG_IDX_AK_CODE, Indexes.APIKEY_TRANSFER_LOG_IDX_CTIME, Indexes.APIKEY_TRANSFER_LOG_IDX_FROM_OWNER, Indexes.APIKEY_TRANSFER_LOG_IDX_TO_OWNER);
    }

    @Override
    public Identity<ApikeyTransferLogRecord, Long> getIdentity() {
        return (Identity<ApikeyTransferLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApikeyTransferLogRecord> getPrimaryKey() {
        return Keys.KEY_APIKEY_TRANSFER_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApikeyTransferLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ApikeyTransferLogRecord>>asList(Keys.KEY_APIKEY_TRANSFER_LOG_PRIMARY);
    }

    @Override
    public ApikeyTransferLog as(String alias) {
        return new ApikeyTransferLog(DSL.name(alias), this);
    }

    @Override
    public ApikeyTransferLog as(Name alias) {
        return new ApikeyTransferLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeyTransferLog rename(String name) {
        return new ApikeyTransferLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeyTransferLog rename(Name name) {
        return new ApikeyTransferLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, String, String, String, String, String, String, Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
